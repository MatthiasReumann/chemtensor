from sympy import S
from sympy.physics.wigner import clebsch_gordan
import re
from os.path import basename


def mrange(j):
    """
    List of 'm' quantum numbers corresponding to quantum number 'j'.
    """
    return [S(m2)/2 for m2 in range(j, -j - 1, -2)]


def clebsch_gordan_tensor(j1: int, j2: int, j3: int):
    """
    Evaluate the Clebsch-Gordan coefficients for given 'j' quantum numbers.
    """
    return [[[clebsch_gordan(S(j1)/2, S(j2)/2, S(j3)/2, m1, m2, m3).evalf(n=17, strict=True)
            for m3 in mrange(j3)]
            for m2 in mrange(j2)]
            for m1 in mrange(j1)]


def convert_to_c_brackets(expr: str):
    """
    Convert Python square to C curly brackets.
    """
    return re.sub(r"\]", r" }", re.sub(r"\[", r"{ ", expr))


def su2_j3_range(j1: int, j2: int):
    """
    Range of the combined quantum number 'j3' for given 'j1' and 'j2'.

    Quantum numbers are represented times 2 to support half-integers without rounding errors.
    """
    return range(abs(j1 - j2), j1 + j2 + 1, 2)


def generate_clebsch_gordan_tables():

    hfile = open("clebsch_gordan.h", "w")
    cfile = open("clebsch_gordan.c", "w")

    hfile.write("/// \\file clebsch_gordan.h\n")
    hfile.write("/// \\brief Clebsch-Gordan coefficient tables.\n")
    hfile.write("///\n")
    hfile.write("/// 'j' quantum numbers are represented times 2, to support half-integers.\n")
    hfile.write("/// 'm' quantum numbers are enumerated as (j, j - 1, ..., -j).\n")
    hfile.write("///\n")
    hfile.write("/// This file has been generated by '" + basename(__file__) + "'.\n")
    hfile.write("\n")
    hfile.write("#pragma once\n")
    hfile.write("\n")
    hfile.write("#include \"qnumber.h\"\n")
    hfile.write("\n")

    cfile.write("/// \\file clebsch_gordan.c\n")
    cfile.write("/// \\brief Clebsch-Gordan coefficient tables.\n")
    cfile.write("///\n")
    cfile.write("/// This file has been generated by '" + basename(__file__) + "'.\n")
    cfile.write("\n")
    cfile.write("#include <stdlib.h>\n")
    cfile.write("#include <assert.h>\n")
    cfile.write("#include \"clebsch_gordan.h\"\n")
    cfile.write("\n")
    cfile.write("\n")

    num_j1 = 6
    num_j2 = 6

    cfile.write("// format: cg_j1_j2_j3[j1+1][j2+1][j3+1]\n")
    for j1 in range(0, num_j1):
        for j2 in range(0, num_j2):
            for j3 in su2_j3_range(j1, j2):
                expr = (f"static const double cg_{j1}_{j2}_{j3}[{j1+1}][{j2+1}][{j3+1}] = "
                        + convert_to_c_brackets(str(clebsch_gordan_tensor(j1, j2, j3)))
                        + ";\n")
                cfile.write(expr)
    cfile.write("\n")

    num_j3 = num_j1 + num_j2 - 1
    cfile.write(f"static const double* cg_table[{num_j1}][{num_j2}][{num_j3}] = {{ ")
    for j1 in range(0, num_j1):
        cfile.write("{ ")
        for j2 in range(0, num_j2):
            cfile.write("{ ")
            for j3 in range(0, num_j3):
                if j3 in su2_j3_range(j1, j2):
                    cfile.write(f"(const double*)cg_{j1}_{j2}_{j3}, ")
                else:
                    cfile.write("NULL, ")
            cfile.write("}, ")
        cfile.write("}, ")
    cfile.write("};\n")

    hfile.write("\n")
    hfile.write("double clebsch_gordan(const qnumber j1, const qnumber j2, const qnumber j3, const int im1, const int im2, const int im3);\n")

    cfile.write(
rf"""

//________________________________________________________________________________________________________________________
///
/// \brief Evaluate the Clebsch-Gordan coefficient at the provided 'j' quantum numbers (represented times 2) and 'm' quantum number indices.
///
double clebsch_gordan(const qnumber j1, const qnumber j2, const qnumber j3, const int im1, const int im2, const int im3)
{{
	assert(0 <= im1 && im1 < j1 + 1);
	assert(0 <= im2 && im2 < j2 + 1);
	assert(0 <= im3 && im3 < j3 + 1);

	if (j3 < abs(j1 - j2) || j3 > j1 + j2) {{
		return 0;
	}}
	if ((j1 + j2 + j3) % 2 != 0) {{
		return 0;
	}}

	// quantum number ranges in precomputed tables
	assert(j1 <= {num_j1 - 1});
	assert(j2 <= {num_j2 - 1});
	assert(j3 <= {num_j3 - 1});

	return cg_table[j1][j2][j3][(im1*(j2 + 1) + im2)*(j3 + 1) + im3];
}}
""")

    cfile.close()
    hfile.close()


if __name__ == "__main__":
    generate_clebsch_gordan_tables()
